REST는 자원을 이름으로 구분하여 해당 자원의 상태를
주고받는 모든 것을 의미합니다. 한마디로 정리하면, 자원(resource)의 표현(representation)에
의한 상태 전달입니다.

REST의 구성과 특징

자원 - URI에 표현이 되어야 함 > 무엇을 서버에 요청할 것인지
행위 - HTTP Method > 어떻게(어떤 방법을) 요청할 것인지
표현 - REpresentations > API 만 보고 무엇을 요청할 것인지 알 수 있도록

REST 서버는 API 제공, 클라이언트는 사용자 인증 등을 직접 관리하는 구조로 각각의 역할이
확실히 구분되기 때문에 클라이언트와 서버에서 개발해야 할 내용이 명확해지고 서로 간 의존성이
줄어들게 됩니다.
REST는 상태정보를 따로 저장하고 관리하지 않습니다. 세션 정보나 쿠키 정보를 별도로 저장하고 관리하지 않기
때문에 API 서버는 들어오는 요청만을 단순히 처리하면 됩니다.
서비스의 자유도가 높아지고 서버에서 불필요한 정보를 관리하지 않음으로써 구현이 단순해집니다.

REST API 디자인 가이드

URL과 URI의 차이점
URL은 : www.naver.com/index.html < index.html이 안에 들어가있음
URI 는 : www.naver.com/index < index가 실제로 파일이 존재하지 않음 > 그러므로 REST API에서는 URI라고 말함.

1.URI는 자원을 표현해야 함
 - REST API로 요청할 때에, URI에서 어떤 데이터를 요청하는지 표현이 되어야 합니다.
 
 2. 자원에 대한 행위는 HTTP Method로 나타내야 함
 
 ex) GET / book / 1
	   POST/book/ 2 등등
	   
REST API  디자인 예시

1. 리소스 요청은 주로 동사보다는 명사를 사용
GET/member/delete/1 이거보다는  DELETE/member/1
GET/member/show/1 이거보다는 GET/members/1
GET/members/inset/10 이거보다는 POST/members/10

2. 슬래시는 계층 관계를 나타냄
http://elice.example.co.kr/lecture/python
http://elice.example.co.kr/user/students

3. 파일 확장자는 URI에 포함하지 않음
http://elice.example.co.kr/lecture/image/1.jpg > http://elice.example.co.kr/lecture/image/1 여기까지만 쓴다.

4. 긴 URI는 밑줄(_)보다는 하이픈(-)을 사용한다.


	   